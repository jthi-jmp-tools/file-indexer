Names Default To Here(1);

//miten tehdä päätös, että moneenko osaan jaetaan?
//tab page box per ???
//

//funktio jolla haetaan koko polut listaan
//funktio jolla parsitaan lista datatauluksi
//funktio jolla luodaan gui

//get all files in directory (figure out fastest way to do this with either JMP or windows cmd.exe)

//filter data

//build UI
	//outline boxes
		//could we build it with Tree Box?
		

//levels to show...

/*a = Run Program(
	Executable("cmd.exe"),
	Options({, "/c", "\[(for /R "C:\Users\jarmo\Documents\Code" %A in (*.*) do echo %~fA %~zA) | findstr /v echo]\"}),
	ReadFunction("text")
);*/

get_file_list = function({directory_paths}, {Default Local},
	path_list = Transform Each({dir_path}, directory_paths, Files In Directory(dir_path, recursive(1)));
	return(path_list);
);

get_list_dt = function({directory_paths}, {Default Local},
	list_files = get_file_list(list_directories);
	dt = New Table("FileListing",
		New Column("FullPath", Character, Nominal),
		New Column("BaseDir", Character, Nominal),
		New Column("Path", Character, Nominal)
	);
	
	path_values = {};
	For Each({file_list}, list_files,
		Insert Into(path_values, file_list);
	);
	dt << Add Rows(N Items(path_values));
	dt[0, "Path"] = path_values;
	
	base_dir_values = {};
	For(i = 1, i <= N Items(directory_paths), i++,
		Insert Into(base_dir_values, Repeat(List(directory_paths[i]), N Items(list_files[i])));
	);
	dt[0, "BaseDir"] = base_dir_values;
	
	Column(dt, "FullPath") << Set Each Value(:BaseDir || :Path);
	dt << New Column("FileName", Character, Nominal,
		<< Set Each Value(Word(-1, :Path, "/"));
	);
	Column(dt, "Path") << Set Each Value(
		Substitute(:Path, :Filename, "");
	);
	dt << New Column("MaxDepth", Numeric, Ordinal,
		<< Set Each Value(N Items(Words(:Path, "/")))
	);
	max_depth = 0;
	For(i = 1, i <= Col Max(:MaxDepth), i++,
		dt << New Column("DirectoryDepth_"||char(i), Character, Nominal,
			<<Set Each Value(
				Word(i, :Path, "/");
			);
		);
		max_depth = i;
	);
	return(dt);
);

list_directories = EvalList({Get Path Variable("SAMPLE_DATA")}); //debug path
list_directories = {
	"C:/Program Files/SAS/JMPPRO/16/Samples/Apps/",
	"C:/Program Files/SAS/JMPPRO/16/Samples/Automation/",
	"C:/Program Files/SAS/JMPPRO/16/Samples/Dashboards/",
	"C:/Program Files/SAS/JMPPRO/16/Samples/Data/",
	"C:/Program Files/SAS/JMPPRO/16/Samples/Images/",
	"C:/Program Files/SAS/JMPPRO/16/Samples/Import Data/",
	"C:/Program Files/SAS/JMPPRO/16/Samples/Projects/",
	"C:/Program Files/SAS/JMPPRO/16/Samples/Scripts/",
	"C:/Program Files/SAS/JMPPRO/16/Samples/STIPS/"
};

list_directories = {"C:/Program Files/SAS/JMPPRO/16/Samples/Data/"};
list_directories = {"C:\Users\jarmo\Documents\Code\JMP\JMP-Tools\.file_indexer\demo"};
dt = get_list_dt(list_directories);

aa_icons = [
	"folder" => "ProjectFolder",
	"jmp" => "JMP",
	"jsl" => "ScriptFile",
	"jmpaddin" => "JMPAddin",
	"jrn" => "JournalFile",
	"jrp" => "ReportFile",
	"jmpprj" => "Project",
	"sql" => "QueryBuilder",
	"htm" => "Browser",
	"html" => "Browser",
	"sql" => "QueryBuilder",
	"jpg" => "Chart",
	"jpeg" => "Chart",
	"png" => "Chart",
	"txt" => "XmlNodeForColumnCharacter",
	"py" => "XmlNodeForColumnCharacter",
	"xlsx" => "WebBrowserImportAsData",
	"pptx" => "Missing",
	"pdf" => "Missing"
];
aa_icons << Set Default Value("Missing");

set_icon = function({str, node}, {file_type},
	file_type = Word(-1, str, ".");
	If(file_type == str,
		node << Set Icon(aa_icons["folder"]);
		node << Set Expanded Icon("ProjectOpenFolder");
	,
		node << Set Icon(aa_icons[lowercase(file_type)]);
	);
);

//listan perusteella?
//C:/Program Files/SAS/JMPPRO/16/Samples/Apps/Graph Launcher.jmpappsource

full_path_list = :fullpath << get as matrix;
base_dir = "C:/Program Files/SAS/JMPPRO/16/Samples/Data/";

path_list = Transform Each({full_path}, full_path_list, Substitute(full_path, base_dir, ""));
Sort List Into(path_list);


get_nodes = function({path_list}, {Default Local},
	roots = {};
	stop();
	For Each({root_value}, full_path_list,
		rows = Loc(dt[0, "DirectoryDepth_1"], root_value);
		
		root_node = Tree Node(root_value || "("||char(N Rows(rows))||")");
		root_node << Set Data("basedir || directorydepth until this point..."); //directory path...
		set_icon("folder", root_node);
		
		For Each({row}, rows,
			file_name = dt[row, "FileName"];
			child_node = Tree Node(file_name);
			child_node << Set Data(dt[row, "FullPath"]);		
			set_icon(file_name, child_node);
			root_node << Append(child_node);
		);
		Insert Into(roots, root_node);
	);
	return(roots);
);

get_nodes(path_list[1::12]);

get_nodes = function({dt}, {Default Local},
	roots = {};	
	Summarize(dt, uniq_roots = by(:DirectoryDepth_1));
	
	For Each({root_value}, uniq_roots,
		rows = Loc(dt[0, "DirectoryDepth_1"], root_value);
		root_node = Tree Node(root_value || "("||char(N Rows(rows))||")");
		root_node << Set Data("basedir || directorydepth until this point..."); //directory path...
		set_icon("folder", root_node);
		
		For Each({row}, rows,
			file_name = dt[row, "FileName"];
			child_node = Tree Node(file_name);
			child_node << Set Data(dt[row, "FullPath"]);		
			set_icon(file_name, child_node);
			root_node << Append(child_node);
		);
		Insert Into(roots, root_node);
	);
	return(roots);
);

getRoots = function({a}, {default local},
	show(1);
);

expandAll= function({a}, {default local},
	show(1);
);

nw = New Window("",
	V List Box(
		Border Box(Left(0), Right(0), top(0), bottom(0), sides(15),
			H List Box(
				align("center"),
				teb_filter = Text Edit Box("",
					<<Set Min Size(100, -1),
					<<Set Max Size(500, -1),
					<<Set Function(
						Function({this},
							tree << set roots(getRoots(this << get text));
							expandAll(tree);
						)
					),
					<<Set AutoStretching(1, 0)
				),
				Button Box("",
					<<Set Icon("Refresh"),
					<<Set Function(Function({this},tree << set roots(getRoots(teb_filter << get text));expandAll(tree);))
				),
				Button Box("",
					<<Set Icon("TabCloseActive"),
					<<Set Function(Function({this},tree << set roots(getRoots(teb_filter << get text));expandAll(tree);))
				),
			)
		)
	),
	H List Box(
		tree = Tree Box(roots, Size(300, 500)), 
		tree1 = Tree Box(roots, Size(300, 500))
	)
);


tree << Set Node Double Click Script(
	function({tree, node},
		show(/*tree, node, */node << Get Child Count, node << get data);
		child_count = node << Get Child Count;
		If(child_count == 0,
			Show("Open File");
		,
			Show("Open Directory");
		);
	);
);
tree << Set Context Menu Script(
	Function({thistree, thisnode}, {
		{"Copy to $TEMP", "", Function({tree, node}, Show("Copy to $TEMP"))},
		{"Copy to $Desktop", "", Function({tree, node}, Show("Copy to $Desktop"))},
		{"Open as Copy", "", Function({tree, node}, Show("Open as Copy"))},
		{"Open Directory", "", Function({tree, node}, Show("Open Directory"))},
		{"Copy path to clipboard", "", Function({tree, node}, Show("Copy path to clipboard"))},
		{"Open in Script Editor", "", Function({tree, node}, Show("Open in Script Editor"))}
	})
);

/*tree << Set Node Select Script(
	function({tree, node},
		//show(node << Get Child Count)
	)
);
*/
stop();

filter_list_dt = function({dt_list}, {Default Local},
	
);

nw = New Window("",
	tb = Tab Box()
);
Summarize(dt, uniq_level1 = by(:DirectoryDepth_1));
//first level of folders will be Tab Page Boxes
For Each({tab_name}, uniq_level1,
	tb << Append(new_tab = Tab Page Box(tab_name, V Scroll Box(Size(600), V List Box(Spacer Box(Size(600,0))))));
	file_btns = dt << Get Rows Where(:DirectoryDepth_1 == tab_name & IsMissing(:DirectoryDepth_2));
	If(N Items(file_btns) > 0,
		((new_tab << child) << child) << Append(tableb = Table Box(String Col Box("FullPath", {}, << Visibility("Collapse")), String Col Box("File", {}), Number Col Box("Size", {}), Number Col Box("Updated", {}), << Set Selectable Rows(1)));
	);
	For Each({new_btn}, file_btns,
		path_to_file = :FullPath[new_btn];
		//Eval(EvalExpr(((new_tab << child) << child) << Append(Button Box(:FileName[new_btn],Expr(open_table);))));
		//(((new_tab << child) << child) << Append(Table Box(String Col Box("File", {:FileName[new_btn]}), Number Col Box("Size", {}), Number Col Box("Updated", {}))));
		tableb << Add Row({:FullPath[new_btn], :FileName[new_btn],.,.});
	);
);
tb << Set Selected(1);


//allow only selection of "one" //first or last? or random? open on click? right click menu for fun stuff
//open as copy
//copy path to clipboard
//copy to $TEMP
	//and open
//last update
//last ...
New Window("TableBrowser",
	Tab Box(
		Tab Page Box("Data",
			Outline Box("Firstdata",
				Table Box(String Col Box("FullPath", {}, << Visibility("Collapse")), String Col Box("File", {"Table1.jmp","Table1.jmp","Table1.jmp","Table1.jmp"}), Number Col Box("Size", {}), Number Col Box("N Rows", {}), Number Col Box("N Cols", {}), Number Col Box("Updated", {}), << Set Selectable Rows(1));
			),
			Outline Box("Second Data",
				Outline Box("Third Data",
					Table Box(String Col Box("FullPath", {}, << Visibility("Collapse")), String Col Box("File", {"Table1.jmp","Table1.jmp","Table1.jmp","Table1.jmp"}), Number Col Box("Size", {}), Number Col Box("Updated", {}), << Set Selectable Rows(1));
				),
				Table Box(String Col Box("FullPath", {}, << Visibility("Collapse")), String Col Box("File", {"Table1.jmp","Table1.jmp","Table1.jmp","Table1.jmp"}), Number Col Box("Size", {}), Number Col Box("Updated", {}), << Set Selectable Rows(1)),
			)
		),
		Tab Page Box("Stips",
			Outline Box("Firstdata",
				Table Box(String Col Box("FullPath", {}, << Visibility("Collapse")), String Col Box("File", {"Table1.jmp","Table1.jmp","Table1.jmp","Table1.jmp"}), Number Col Box("Size", {}), Number Col Box("Updated", {}), << Set Selectable Rows(1));
			),
			Outline Box("Firstdata",
				Table Box(String Col Box("FullPath", {}, << Visibility("Collapse")), String Col Box("File", {"Table1.jmp","Table1.jmp","Table1.jmp","Table1.jmp"}), Number Col Box("Size", {}), Number Col Box("Updated", {}), << Set Selectable Rows(1));
			)			
		),
	)
);
Names Default To Here(1);

//make multi-level context menu
	//tree
	//node
	//open
	//...

// slighly based on MFI Standard Data indexer
// some inspiration from jslFunctionsList.jsl by Justin...

//"headeri", jossa kerrotaan mitä mikäkin tekee...
//ctrl, shift, alt jne...

//asetuksia
	//add to recent files on open, disabled
	//open as subset, enabled
	//copy to clipboard as string, disabled
	//directory + name settings + filtering
		//use two lists, easier to manage order
			//if no name list is provided -> use path
		// name list
		// direcxtory list
		// filter list
	// also global filter
	// exclude extensions
	// include extensions
	
	//how to display filtered file count?
	//show total file count...
	//add file count to tab page box
	
//open in script editor
	//if datatable
		//Names Default To Here(1);
		//dt = Open("path");

//todo
	//how to handle file size, modified data and so on...
	//how to handle jmp path variables
		//$SAMPLE_DATE, $ADDIN and so on...
	//add filtering..

//window which will show ALL files in one tree / 3-4 columns
	//allow alphabetical searching from this list
	
// move non folder files to end

//icons.jsl
get_node_icons = function({key = ""}, {Default Local},
	aa_icons = [
		"folder" => "ProjectFolder",
		"jmp" => "JMP",
		"jsl" => "ScriptFile",
		"jmpaddin" => "JMPAddin",
		"jrn" => "JournalFile",
		"jrp" => "ReportFile",
		"jmpprj" => "Project",
		"jmpappsource" => "AppFile",
		"sql" => "QueryBuilder",
		"htm" => "InternetOpen",
		"html" => "InternetOpen",
		"sql" => "QueryBuilder",
		"jpg" => "Chart",
		"jpeg" => "Chart",
		"png" => "Chart",
		"txt" => "TextImport",
		"py" => "TextAnalysis",
		"xls" => "ExcelImport",
		"xlsx" => "ExcelImport",
		"pptx" => "Missing",
		"pdf" => "PDFImport",
		"xml" => "XMLImport",
		"json" => "JSONImport",
		"csv" => "StructuralEquationModelsReorganize"
	];
	aa_icons << Set Default Value("Missing");
	return(aa_icons[lowercase(key)]);
);

set_node_icon = function({str, node}, {file_type},
	file_type = Word(-1, str, ".");
	If(file_type == str,
		node << Set Icon(get_node_icons("folder"));
		node << Set Expanded Icon("ProjectOpenFolder");
	,
		node << Set Icon(get_node_icons(file_type));
	);
);

//get_files.jsl

get_file_list = function({directory_paths}, {Default Local},
	path_list = Transform Each({dir_path}, directory_paths, Files In Directory(dir_path, recursive(1)));
	return(path_list);
);

get_list_dt = function({directory_paths}, {Default Local},
	list_files = get_file_list(list_directories);
	dt = New Table("FileListing",
		New Column("FullPath", Character, Nominal),
		New Column("BaseDir", Character, Nominal),
		New Column("Path", Character, Nominal),
		invisible
	);
	
	path_values = {};
	For Each({file_list}, list_files,
		Insert Into(path_values, file_list);
	);
	dt << Add Rows(N Items(path_values));
	dt[0, "Path"] = path_values;
	
	base_dir_values = {};
	For(i = 1, i <= N Items(directory_paths), i++,
		Insert Into(base_dir_values, Repeat(List(directory_paths[i]), N Items(list_files[i])));
	);
	dt[0, "BaseDir"] = base_dir_values;
	
	Column(dt, "FullPath") << Set Each Value(:BaseDir || :Path);
	dt << New Column("FileName", Character, Nominal,
		<< Set Each Value(Word(-1, :Path, "/"));
	);
	Column(dt, "Path") << Set Each Value(
		Substitute(:Path, :Filename, "");
	);
	dt << New Column("MaxDepth", Numeric, Ordinal,
		<< Set Each Value(N Items(Words(:Path, "/")))
	);
	max_depth = 0;
	For(i = 1, i <= Col Max(:MaxDepth), i++,
		dt << New Column("DirectoryDepth_"||char(i), Character, Nominal,
			<<Set Each Value(
				Word(i, :Path, "/");
			);
		);
		max_depth = i;
	);
	return(dt);
);

list_directories = EvalList({Get Path Variable("SAMPLE_DATA")}); //debug path
list_directories = {
	"C:/Program Files/SAS/JMPPRO/16/Samples/Apps/",
	"C:/Program Files/SAS/JMPPRO/16/Samples/Automation/",
	"C:/Program Files/SAS/JMPPRO/16/Samples/Dashboards/",
	"C:/Program Files/SAS/JMPPRO/16/Samples/Data/",
	"C:/Program Files/SAS/JMPPRO/16/Samples/Images/",
	"C:/Program Files/SAS/JMPPRO/16/Samples/Import Data/",
	"C:/Program Files/SAS/JMPPRO/16/Samples/Projects/",
	"C:/Program Files/SAS/JMPPRO/16/Samples/Scripts/",
	"C:/Program Files/SAS/JMPPRO/16/Samples/STIPS/"
};

list_names = {"Apps", "Automation", "Dashboards", "Data", "Images", "Import Data", "Projects", "Scripts", "STIPS"};

//list_directories = {"C:/Program Files/SAS/JMPPRO/16/Samples/Data/"};

get_roots = Function({col_list, cur_depth = 1, dt = Current Data Table(), prev_val = Empty(), root_node = Tree Node("Root")}, {Default Local},
/*
	col_list - list of columns to check. Last one should containt the value which will be added to leaves
	cur_depth - recursion depth
	max_depth - should be one less than length of col_list
	dt - datatable to go over
	prev_val - 
	tree_nodes - list to collect nodes
*/
	max_depth = N Items(col_list) - 1;
	Summarize(dt, depth_uniq = by(Column(col_list[cur_depth])));
	For Each({val}, depth_uniq, //this is a new node, which should be added to current level?
		r = Loc(dt[0, col_list[cur_depth]], val);
		//show(r, val);
		If(cur_depth > max_depth | IsMissing(val),
			If(cur_depth == 1,
				prev_val = root_node;
			);
			For Each({filename}, dt[r, Right(col_list, 1)[1]],
				new_node = Tree Node(filename);
				set_node_icon(filename, new_node);
				prev_val << Append(new_node); //filen dataan laitettava joko full path tai vähintään rakennettava path viimeisestä asti
			);
		, //else
			dt_temp = dt << Subset(rows(r), invisible); //change to private when sure that they are closed
			new_node = Tree Node(val || "(" ||char(n items(r))||")");
			set_node_icon("folder", new_node);
			If(cur_depth == 1,
				root_node << Append(new_node),
				prev_val << Append(new_node);
			);
			Recurse(col_list, cur_depth + 1, dt_temp, new_node, root_node);
			Close(dt_temp, no save);
		);
	);
	return(root_node);
);

dt = get_list_dt(list_directories);


//double_click_node =
//double_click_leaf = 

//liikuta Root "filet" loppuun, eikä juuren alkuun -> eli liikuta kaikki joiden child > 0 alkuun


//run script...
nw = New Window("File Indexer", //add total file count to window title? icon for window?
	tb = Tab Box()
);

nw << On Close(
	Try(
		close(dt, no save), show(exception_msg)
	)
);

Summarize(dt, uniq_dirs = by(:BaseDir));

// still might be better to add full path of leaves to nodes
// this helps when you want to reduce the max_depth, as you won't have the full folder structure
	// if something goes beyond max_depth, should it be marked somehow?
col_list = {"DirectoryDepth_1", "DirectoryDepth_2", "FileName"};

For Each({folder, idx}, uniq_dirs,
	r = Loc(dt[0, "BaseDir"], folder);
	dt_temp = dt << Subset(rows(r));

	root_node = Tree Node("Root" || "(" || Char(N Rows(dt_temp)) ||")");
	root_node << Set Data(folder);
	roots = get_roots(col_list, 1, dt_temp, . , root_node);

	Close(dt_temp, no save);
	
	tb << Add(
		list_names[idx],
		V List Box(
			Border Box(Left(0), Right(0), top(0), bottom(0), sides(15),
				H List Box(align("center"),
					Text Edit Box("", << Set Min Size(100, -1), << Set Max Size(600, -1), << Set Auto Stretching(1,0), << Set Hint("Filter...")),
					Button Box("",<<Set Icon("Refresh")),
					Button Box("",<<Set Icon("TabCloseActive")),
				)
			),
			tree = Tree Box({roots}, size(500,600))
		)
	);
	
	tree << Set Node Double Click Script(function({tree, node},
		child_count = node << Get Child Count;
		If(child_count == 0,
			Show("Open File");
			//is shift...is alt...is ctrl
			//get info...
			open_node_path(tree, node);
		, //else folder
			If(Is Shift Key() | Is Alt Key(),
				If(tree << Is Expanded(node),
					show("collapse");
					collapse_child(tree, node);
				,
					show("expand");
					expand_child(tree, node);
				);
			,Is Control Key(),
				open_node_path(tree, node);
			);
		);
	));
	
	/*
	tree << Set Node Select Script(function({tree, node},
		child_count = node << Get Child Count;
		If(child_count  > 0,
			//show(Is Shift Key(), Is Alt Key(), Is Control Key()); //täytyy tehdä mouseboxin? kanssa
			If(Is Shift Key() | Is Alt Key(),
				expand_child(tree, node);
			,Is Control Key(),
				open_node_path(tree, node);
			)
		)
	));
	*/
	
	tree << Set Context Menu Script(
		Function({thistree, thisnode}, {
			{"Collapse Tree", "", Function({tree, node}, collapse_tree(tree))},
			{"Expand Tree", "", Function({tree, node}, expand_tree(tree))},
			{"", "separator", ""},
			{"Collapse Node", "", Function({tree, node}, collapse_child(tree,node))}, //jos koittaa collapseta leaffia -> collapsee parent node
			{"Expand Node", "", Function({tree, node}, expand_child(tree,node))},
			{"", "separator", ""},
			{"Open", "", Function({tree, node}, open_node_path(tree,node))},
			{"Copy Path to Clipboard", "", Function({tree, node}, Set Clipboard(get_node_path(tree,node)))},
			{"Open Directory", "", Function({tree, node}, open_node_directory(tree,node))}, //open PATH of the file / directory, not file
			{"", "separator", ""},
			{"Copy to $TEMP", "", Function({tree, node}, Show("Copy to $TEMP"))},
			{"Copy to $Desktop", "", Function({tree, node}, Show("Copy to $Desktop"))},
			{"Open as Copy", "", Function({tree, node}, Show("Open as Copy"))},
			{"Open in Script Editor", "", Function({tree, node}, Show("Open in Script Editor"))}
		})
	);
	root_node = (tree << get roots)[1];
	set_node_icon("folder", root_node);
	tree << Expand(root_node); //to expand root
);
tb << Set Selected(1);

//expand all child nodes 
expand_child = function({tree, node}, {Default Local},
	tree << expand(node);
	child_count = node << Get Child Count();
	For(i = 1, i <= child_count, i++,
		child = node << Get Child(i);
		Recurse(tree, child);
	);
);

expand_tree = function({tree}, {Default Local},
	For Each({root}, tree << get roots(),
		expand_child(tree, root);
	);
);

collapse_child = function({tree, node}, {Default Local},
	tree << collapse(node);
	child_count = node << Get Child Count();
	For(i = 1, i <= child_count, i++,
		child = node << Get Child(i);
		Recurse(tree, child);
	);
);

collapse_tree = function({tree}, {Default Local},
	For Each({root}, tree << get roots(),
		collapse_child(tree, root);
	);
);

get_node_path = function({tree, node}, {Default Local},
	path = {};
	While(!IsEmpty(node),
		label = node << get label;
		If(Is Empty(node << parent),
			label = node << get data;
		);
		new_path = Regex(label, "\(\d*\)$", "", GLOBALREPLACE); //remove file count
		Insert Into(path, new_path, 1); //if has (number) in the end -> replace with ""
		node = node << parent;
	);
	path = Concat Items(path, "/");
	Substitute Into(path, "//", "/"); //might be a bit risky, but...
	return(path);
	
);

//open path / open node path?
open_node_path = function({tree, node}, {Default Local},
	path = get_node_path(tree, node);
	If(node << Is Leaf(),
		//Open(path);
	,
		Open(path); //Folder
	);
);

open_node_directory = function({tree, node}, {Default Local},
	path = get_node_path(tree, node);
	If(node << Is Leaf(),
		dir_path = Left(path, Contains(path, "/", -1));
	,
		dir_path = path;
	);
	open(dir_path);	
);

root = (tree << get roots)[1];
root << Get Child Count;